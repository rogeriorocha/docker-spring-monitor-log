version: '3.3'

services:
  app:
    #build: .
    #restart: always
    build:
      context: .     
    labels:
      filebeat_enable:
    networks:
      - backend 
    ports:
      - "8080:8080"
    links:
      - logstash
    environment:
       SPRING_APPLICATION_JSON: '{
        "spring.profiles.active" : "docker",
        "spring.datasource.username": "sist_controle",
        "spring.datasource.password": "Ho1#h=j4",
        "spring.datasource.driverClassName": "com.microsoft.sqlserver.jdbc.SQLServerDriver",
        "spring.datasource.url": "jdbc:sqlserver://desesqlbdmg:2002;databaseName=bdseg"
      }'      
    volumes:
      - ./data/app/store:/store      

    healthcheck:
      test: ["CMD", "curl", "-fail", "http://localhost:8080/api/v1/healthcheck"]
      interval: 10s
      timeout: 10s
      retries: 3
        

  elasticsearch:
    build: 
      context:  elk/elasticsearch/
      args:
        ELK_VERSION: $ELK_VERSION    
    #container_name: elasticsearch
    volumes:
      - ./data/es/data:/usr/share/elasticsearch/data
    networks:
      - backend
    ports:
      - "9200:9200"
      - "9300:9300"
    environment:
      ES_JAVA_OPTS: "-Xms1g -Xmx1g"
    labels:
      org.label-schema.group: "logging"
      
  logstash:
    build: 
      context: elk/logstash/
      args:
        ELK_VERSION: $ELK_VERSION
    #container_name: logstash
    command: -f /etc/logstash/conf.d/
    networks:
      - backend
    volumes:
      - ./elk/logstash/config:/etc/logstash/conf.d
    ports:
    #  - "9999:9999"
      - "31311:31311"
      - "5044:5044"
    links:
      - elasticsearch
    labels:
      org.label-schema.group: "logging"

  kibana:
    build: 
      context: elk/kibana/
      args:
        ELK_VERSION: $ELK_VERSION
    #container_name: kibana
    networks:
      - backend
    volumes:
      - ./elk/kibana/config/:/opt/kibana/config/
    ports:
      - "5601:5601"
    links:
      - elasticsearch

  filebeat:
    build: elk/filebeat
    links:
      - app
      - logstash
      - elasticsearch
    networks:
      - backend
    volumes:
      # needed to access all docker logs :
      - "/var/lib/docker/containers:/var/lib/docker/containers"
      # needed to access additional information about containers
      - "/var/run/docker.sock:/var/run/docker.sock"
    labels:
      org.label-schema.group: "logging"
                      

  prometheus:
    #build: monitor/prometheus
    image:  prom/prometheus
    volumes:
      - ./monitor/prometheus/config/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus-data
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
    links:
      - app        
    networks:
      - backend
    ports:
      - "9090:9090"
    labels:
      org.label-schema.group: "monitoring"        
  
  grafana:
    image:  grafana/grafana
    volumes:
      - grafana-data:/var/lib/grafana

    links:
      - prometheus
    networks:
      - backend
    ports:
      - "3000:3000"
    labels:
      org.label-schema.group: "monitoring"        

volumes:
  prometheus-data:
  grafana-data:

networks:
  backend:
    driver: "bridge"

